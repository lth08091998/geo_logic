-- PREDICATES --

~ not_eq : a:P b:P ; a:L b:L ; a:C b:C ; a:D b:D ; a:A b:A ; b:P a:P ; b:L a:L ; b:C a:C ; b:D a:D ; b:A a:A
~ intersecting : L C ; C L ; a:C b:C ; b:C a:C
~ oriented_as : P P P P P P
~ small_angle2 : A
~ small_angle3 : A
~ dim_less : D D
~ not_on : P L ; P C
lies_on : P L ; P C

-- PREDEFINED --

direction_of : L -> A

line : A:P B:P -> p:L ; B:P A:P -> p:L
  <- not_eq A B
  = lies_on A p
  = lies_on B p

line_with_direction : A:P d:A -> p:L
  = lies_on A p
  d' = direction_of p
  = d' == d

point_on : p:L -> X:P
  = lies_on X p

dist: A:P B:P -> d:D ; B:P A:P -> d:D
  <- not_eq A B

radius_of : C -> D
center_of : C -> P
circle : C:P r:D -> c:C
  r' = radius_of c
  C' = center_of c
  = r == r'
  = C == C'

-- CONSTRUCTED --

trisides: A:P B:P C:P -> a:L b:L c:L
  a = line B C
  b = line C A
  c = line A B

compass : A:P B:P C:P -> c:C
  d = dist A B
  c = circle C d

not_parallel : l0:L l1:L
  x <- direction_of l0
  y <- direction_of l1
  <- not_eq x y

parallel : l0:L l1:L
  x <- direction_of l0
  y <- direction_of l1
  <- x == y

parallel : l0:L A:P B:P ; A:P B:P l0:L
  l1 <- line A B
  <- parallel l0 l1
parallel : A0:P B0:P A1:P B1:P
  l0 <- line A0 B0
  <- parallel l0 A1 B1

perpendicular : l0:L l1:L
  x <- direction_of l0
  y <- direction_of l1
  <- x == y + 90^

perpendicular : l0:L A:P B:P ; A:P B:P l0:L
  l1 <- line A B
  <- perpendicular l0 l1
perpendicular : A0:P B0:P A1:P B1:P
  l0 <- line A0 B0
  <- perpendicular l0 A1 B1

-- PREDEFINED --

intersection: a:L b:L -> X:P ; b:L a:L -> X:P
  <- not_parallel a b
  = lies_on X a
  = lies_on X b
intersection0: a:C b:C -> X:P ; b:C a:C -> X:P ; a:L b:C -> X:P ; a:C b:L -> X:P
  <- intersecting a b
  = lies_on X a
  = lies_on X b
intersection_remoter: a:C b:C P -> X:P ; b:C a:C P -> X:P ; a:C b:L P -> X:P ;  a:L b:C P -> X:P
  <- intersecting a b
  = lies_on X a
  = lies_on X b

-- CONSTRUCTED --

intersection1: a:C b:C -> X:P ; a:L b:C -> X:P ; a:C b:L -> X:P
  <- intersecting a b
  X0 = intersection0 a b
  X = intersection_remoter a b X0

intersection_closer: a:C b:C Y:P -> X:P ; a:L b:C Y:P -> X:P ; a:C b:L Y:P -> X:P
  <- intersecting a b
  X0 = intersection_remoter a b Y
  X = intersection_remoter a b X0

intersections: a:C b:C -> X0:P X1:P ;  a:C b:L -> X0:P X1:P ;  a:L b:C -> X0:P X1:P
  <- intersecting a b
  X0 = intersection0 a b
  X1 = intersection_remoter a b X0

eq_dist : A0:P B0:P d1:D ; d1:D A0:P B0:P
  d0 <- dist A0 B0
  <- d0 == d1
eq_dist : A0:P B0:P A1:P B1:P
  d0 <- dist A0 B0
  d1 <- dist A1 B1
  <- d0 == d1

direction_of : A:P B:P -> dir:A
  <- not_eq A B
  l = line A B
  dir = direction_of l

angle : l0:L l1:L -> alpha:A
  d0 = direction_of l0
  d1 = direction_of l1
  alpha = d0 - d1

angle : l0:L A1:P B1:P -> alpha:A
  l1 = line A1 B1
  alpha = angle l0 l1
angle : A0:P B0:P l1:L -> alpha:A
  l0 = line A0 B0
  alpha = angle l0 l1
angle : A0:P B0:P A1:P B1:P -> alpha:A
  l0 = line A0 B0
  alpha = angle l0 A1 B1
angle : A:P B:P C:P -> alpha:A
  alpha = angle B A B C

eq_angle : A0:P B0:P C0:P A1:P B1:P C1:P
  alpha0 <- angle A0 B0 C0
  alpha1 <- angle A1 B1 C1
  <- alpha0 == alpha1
eq_angle : A0:P B0:P C0:P a1:L b1:L
  alpha0 <- angle A0 B0 C0
  alpha1 <- angle a1 b1
  <- alpha0 == alpha1
eq_angle : a0:L b0:L A1:P B1:P C1:P
  alpha0 <- angle a0 b0
  alpha1 <- angle A1 B1 C1
  <- alpha0 == alpha1
eq_angle : a0:L b0:L a1:L b1:L
  alpha0 <- angle a0 b0
  alpha1 <- angle a1 b1
  <- alpha0 == alpha1

tri_angles: A:P B:P C:P -> alpha:A beta:A gamma:A
  alpha = angle C A B
  beta = angle A B C
  gamma = angle B C A

dist_ratio : A0:P B0:P A1:P B1:P -> r:D
  <- not_eq A0 B0
  <- not_eq A1 B1
  d0 = dist A0 B0
  d1 = dist A1 B1
  r = d0 / d1

-- AXIOMS --

line_uq : A:P B:P l:L
  <- not_eq A B
  <- lies_on A l
  <- lies_on B l
  l' = line A B
  = l == l'
line_uq : A:P d:A l:L
  <- lies_on A l
  d' <- direction_of l
  <- d' == d
  l' <- line_with_direction A d
  = l == l'
intersection_uq : l1:L l2:L X:P
  <- lies_on X l1
  <- lies_on X l2
  <- not_parallel l1 l2
  X' = intersection l1 l2
  = X == X'

ratio2 : A:P B:P C:P l:L
  <- lies_on A l
  <- lies_on B l
  <- lies_on C l
  <- eq_dist A B B C
  <- not_eq A C
  r = dist_ratio A C A B
  = r == 2

cong_sss : A0:P B0:P C0:P A1:P B1:P C1:P ->
  <- oriented_as A0 B0 C0 A1 B1 C1
  <- eq_dist B0 C0 B1 C1
  <- eq_dist C0 A0 C1 A1
  <- eq_dist A0 B0 A1 B1
  = eq_angle C0 A0 B0 C1 A1 B1
  = eq_angle A0 B0 C0 A1 B1 C1
  = eq_angle B0 C0 A0 B1 C1 A1

cong_sas : A0:P B0:P C0:P A1:P B1:P C1:P ->
  <- oriented_as A0 B0 C0 A1 B1 C1
  <- eq_dist B0 C0 B1 C1
  <- eq_angle A0 B0 C0 A1 B1 C1
  <- eq_dist A0 B0 A1 B1
  = eq_angle C0 A0 B0 C1 A1 B1
  = eq_dist C0 A0 C1 A1
  = eq_angle B0 C0 A0 B1 C1 A1

cong_asa : A0:P B0:P C0:P A1:P B1:P C1:P ->
  <- oriented_as A0 B0 C0 A1 B1 C1
  <- eq_angle C0 A0 B0 C1 A1 B1
  <- eq_dist C0 A0 C1 A1
  <- eq_angle B0 C0 A0 B1 C1 A1
  = eq_dist B0 C0 B1 C1
  = eq_angle A0 B0 C0 A1 B1 C1
  = eq_dist A0 B0 A1 B1

cong_Ssa : A0:P B0:P C0:P A1:P B1:P C1:P ->
  <- oriented_as A0 B0 C0 A1 B1 C1
  <- eq_dist B0 C0 B1 C1
  <- eq_dist C0 A0 C1 A1
  <- eq_angle C0 A0 B0 C1 A1 B1
  a <- dist B0 C0
  b <- dist C0 A0
  <- dim_less b a
  = eq_angle B0 C0 A0 B1 C1 A1
  = eq_angle A0 B0 C0 A1 B1 C1
  = eq_dist A0 B0 A1 B1

cong_sss_r : A0:P B0:P C0:P A1:P B1:P C1:P ->
  <- oriented_as A0 B0 C0 A1 C1 B1
  <- eq_dist B0 C0 B1 C1
  <- eq_dist C0 A0 C1 A1
  <- eq_dist A0 B0 A1 B1
  = eq_angle C0 A0 B0 B1 A1 C1
  = eq_angle A0 B0 C0 C1 B1 A1
  = eq_angle B0 C0 A0 A1 C1 B1

cong_sas_r : A0:P B0:P C0:P A1:P B1:P C1:P ->
  <- oriented_as A0 B0 C0 A1 C1 B1
  <- eq_dist B0 C0 B1 C1
  <- eq_angle A0 B0 C0 C1 B1 A1
  <- eq_dist A0 B0 A1 B1
  = eq_angle C0 A0 B0 B1 A1 C1
  = eq_dist C0 A0 C1 A1
  = eq_angle B0 C0 A0 A1 C1 B1

cong_asa_r : A0:P B0:P C0:P A1:P B1:P C1:P ->
  <- oriented_as A0 B0 C0 A1 C1 B1
  <- eq_angle C0 A0 B0 B1 A1 C1
  <- eq_dist C0 A0 C1 A1
  <- eq_angle B0 C0 A0 A1 C1 B1
  = eq_dist B0 C0 B1 C1
  = eq_angle A0 B0 C0 C1 B1 A1
  = eq_dist A0 B0 A1 B1

cong_Ssa_r : A0:P B0:P C0:P A1:P B1:P C1:P ->
  <- oriented_as A0 B0 C0 A1 C1 B1
  <- eq_dist B0 C0 B1 C1
  <- eq_dist C0 A0 C1 A1
  <- eq_angle C0 A0 B0 B1 A1 C1
  a <- dist B0 C0
  b <- dist C0 A0
  <- dim_less b a
  = eq_angle B0 C0 A0 A1 C1 B1
  = eq_angle A0 B0 C0 C1 B1 A1
  = eq_dist A0 B0 A1 B1

sim_sas : A0:P B0:P C0:P A1:P B1:P C1:P
  <- oriented_as A0 B0 C0 A1 B1 C1
  ra <- dist_ratio B0 C0 B1 C1
  rb <- dist_ratio C0 A0 C1 A1
  rc <- dist_ratio A0 B0 A1 B1
  <- ra == rc
  <- eq_angle A0 B0 C0 A1 B1 C1
  = rb == ra
  = eq_angle C0 A0 B0 C1 A1 B1
  = eq_angle B0 C0 A0 B1 C1 A1

sim_aa : A0:P B0:P C0:P A1:P B1:P C1:P
  <- oriented_as A0 B0 C0 A1 B1 C1
  ra <- dist_ratio B0 C0 B1 C1
  rb <- dist_ratio C0 A0 C1 A1
  rc <- dist_ratio A0 B0 A1 B1
  <- eq_angle C0 A0 B0 C1 A1 B1
  <- eq_angle A0 B0 C0 A1 B1 C1
  = ra == rb
  = ra == rc

sim_sas_r : A0:P B0:P C0:P A1:P B1:P C1:P
  <- oriented_as A0 B0 C0 A1 C1 B1
  ra <- dist_ratio B0 C0 B1 C1
  rb <- dist_ratio C0 A0 C1 A1
  rc <- dist_ratio A0 B0 A1 B1
  <- ra == rc
  <- eq_angle A0 B0 C0 C1 B1 A1
  = rb == ra
  = eq_angle C0 A0 B0 B1 A1 C1
  = eq_angle B0 C0 A0 A1 C1 B1

sim_aa_r : A0:P B0:P C0:P A1:P B1:P C1:P
  <- oriented_as A0 B0 C0 A1 C1 B1
  ra <- dist_ratio B0 C0 B1 C1
  rb <- dist_ratio C0 A0 C1 A1
  rc <- dist_ratio A0 B0 A1 B1
  <- eq_angle C0 A0 B0 B1 A1 C1
  <- eq_angle A0 B0 C0 C1 B1 A1
  = ra == rb
  = ra == rc

isosceles_ss : A:P B:P C:P
  <- eq_dist A B A C
  <- not_eq B C
  = eq_angle A B C B C A

angle_div2 : ang:A
  <- small_angle2 ang
  <- 2 ang == 0^
  = ang == 0^
angle_div3 : ang:A
  <- small_angle3 ang
  <- 3 ang == 0^
  = ang == 0^

radius_dist : X:P c:C
  <- lies_on X c
  C = center_of c
  d = dist X C
  r = radius_of c
  = r == d

on_circle_by_dist : X:P c:C
  C <- center_of c
  r <- radius_of c
  <- eq_dist X C r
  = lies_on X c

-- CONSTRUCTED --

parallel_eq : l0:L l1:L A:P
  <- parallel l0 l1
  <- lies_on A l0
  <- lies_on A l1
  dir = direction_of l0
  = line_uq A dir l0
  = line_uq A dir l1
  = l0 == l1

circle : C:P A:P -> c:C
  c = compass A C C
  = on_circle_by_dist A c

isosceles_aa : A:P B:P C:P
  <- eq_angle A B C B C A
  = cong_asa_r C A B B A C
  = eq_dist A B A C

angle_div2 : ang0:A ang1:A
  <- 2 ang0 == 2 ang1
  ang = ang0 - ang1
  = angle_div2 ang
  = ang0 == ang1
angle_div3 : ang0:A ang1:A
  <- 3 ang0 == 3 ang1
  ang = ang0 - ang1
  = angle_div3 ang
  = ang0 == ang1

deltoid : A:P B:P C:P D:P
  <- isosceles_ss A B D
  <- eq_dist B C C D
  = cong_sss_r D A C B A C
  ang = angle A C B D
  a90 = 90^
  = angle_div2 ang a90

  = eq_angle D A C C A B
  = eq_angle B C A A C D
  = perpendicular A C B D

chord_is_perp : c0:C c1:C X0:P X1:P
  <- not_eq X0 X1
  <- intersecting c0 c1
  <- lies_on X0 c0
  <- lies_on X0 c1
  <- lies_on X1 c0
  <- lies_on X1 c1
  C0 = center_of c0
  C1 = center_of c1
  = radius_dist X0 c0
  = radius_dist X0 c1
  = radius_dist X1 c0
  = radius_dist X1 c1
  = deltoid C0 X0 C1 X1
  = perpendicular C0 C1 X0 X1

perp_bisector: A:P B:P -> l:L
  <- not_eq A B
  c0 = circle A B
  c1 = circle B A
  X0 X1 = intersections c0 c1
  l = line X0 X1
  = chord_is_perp c0 c1 X0 X1
  = perpendicular l A B

point_on_perp_bisector: X:P A:P B:P
  p <- perp_bisector A B
  <- lies_on X p
  a = line A X
  b = line B X
  c0 = circle A B
  c1 = circle B A
  X0 X1 = intersections c0 c1
  = line_uq X0 X p
  = isosceles_ss X0 A B
  = cong_sas_r A X0 X B X0 X

  = eq_dist X A X B
  = eq_angle a p p b

point_lies_on_perp_bisector: A:P B:P X:P
  <- eq_dist X A X B
  p <- perp_bisector A B

  c0 = circle A B
  c1 = circle B A
  X0 _ = intersections c0 c1
  = radius_dist X0 c0
  = radius_dist X0 c1
  = deltoid X0 B X A
  p' = line X X0
  = parallel_eq p p' X0

  = lies_on X p
  a = line A X
  b = line B X
  = eq_angle a p p b

midpoint: A:P B:P -> X:P
  l = line A B
  x = perp_bisector A B
  X = intersection l x
  = point_on_perp_bisector X A B
  = line_uq A X l
  = line_uq B X l
  = ratio2 A X B l

midpoint_uq: A:P B:P X:P
  l <- line A B
  <- lies_on X l
  <- not_eq A B
  <- eq_dist A X X B
  X' = midpoint A B
  = point_lies_on_perp_bisector A B X
  p = perp_bisector A B
  = intersection_uq l p X
  = X == X'

parallelogram_aa: A:P B:P C:P D:P
  <- parallel A B C D
  <- parallel B C D A
  = cong_asa A B C C D A
  = eq_dist A B C D
  = eq_dist B C D A

parallelogram_ss: A:P B:P C:P D:P
  <- eq_dist A B C D
  <- eq_dist B C D A
  = cong_sss A B C C D A
  = parallel A B C D
  = parallel B C D A

parallelogram_sa: A:P B:P C:P D:P
  <- eq_dist A B C D
  <- parallel A B C D
  = cong_sas C A B A C D
  = eq_dist B C D A
  = parallel B C D A

rectangle_axis: A:P B:P C:P D:P -> l:L
  <- perpendicular A B B C
  <- perpendicular B C C D
  <- perpendicular C D D A
  = parallelogram_aa A B C D
  M0 = midpoint A B
  M1 = midpoint C D
  l = line M0 M1

  = parallelogram_sa M0 B C M1
  = perpendicular M0 M1 A B
  l0 = perp_bisector A B
  l1 = perp_bisector C D
  = parallel_eq l0 l M0
  = parallel_eq l1 l M1

  = l0 == l
  = l1 == l

circumcenter: A:P B:P C:P -> O:P
  a = perp_bisector B C
  b = perp_bisector C A
  c = perp_bisector A B
  O = intersection a b
  = point_on_perp_bisector O B C
  = point_on_perp_bisector O C A
  = point_lies_on_perp_bisector A B O

  = eq_dist O A O B
  = eq_dist O A O C
  = lies_on O a
  = lies_on O b
  = lies_on O c

circumcenter_uq: A:P B:P C:P O:P
  <- eq_dist O A O B
  <- eq_dist O A O C
  O' = circumcenter A B C

  a = perp_bisector B C
  b = perp_bisector C A
  = point_lies_on_perp_bisector B C O  
  = point_lies_on_perp_bisector C A O
  = intersection_uq a b O

  = O == O'

circumcircle: A:P B:P C:P -> c:C
  O = circumcenter A B C
  c = circle O A
  = on_circle_by_dist B c
  = on_circle_by_dist C c
  = lies_on A c
  = lies_on B c
  = lies_on C c

copy_triangle: A0:P B0:P C0:P A1:P B1:P -> C1:P
  alpha beta gamma = tri_angles A0 B0 C0
  a0 b0 c0 = trisides A0 B0 C0
  c1 = line A1 B1
  dc1 = direction_of A1 B1
  da1 = dc1 - beta
  db1 = dc1 + alpha
  a1 = line_with_direction B1 da1
  b1 = line_with_direction A1 db1
  C1 = intersection a1 b1
  = line_uq B1 C1 a1
  = line_uq C1 A1 b1
  = sim_aa A0 B0 C0 A1 B1 C1

copy_triangle_r : A0:P B0:P C0:P A1:P B1:P -> C1:P
  alpha beta gamma = tri_angles A0 B0 C0
  dc1 = direction_of A1 B1
  da1 = dc1 + beta
  db1 = dc1 - alpha
  a1 = line_with_direction B1 da1
  b1 = line_with_direction A1 db1
  C1 = intersection a1 b1
  = line_uq B1 C1 a1
  = line_uq C1 A1 b1
  = sim_aa_r A0 B0 C0 A1 B1 C1

cong_circumradius: A0:P B0:P C0:P A1:P B1:P C1:P
  <- cong_sss A0 B0 C0 A1 B1 C1
  c0 = circumcircle A0 B0 C0
  c1 = circumcircle A1 B1 C1
  r0 = radius_of c0
  r1 = radius_of c1

  O0 = circumcenter A0 B0 C0
  O1 = copy_triangle A0 B0 O0 A1 B1
  = cong_sas O0 A0 C0 O1 A1 C1
  = circumcenter_uq A1 B1 C1 O1

  = r0 == r1

diacircle: A:P B:P -> c:C
  M = midpoint A B
  c = circle M A
  = on_circle_by_dist A c
  = on_circle_by_dist B c

inscribed_angle: X:P Y:P Z:P c:C -> ins_angle:A cent_angle:A
  <- lies_on X c
  <- lies_on Y c
  <- lies_on Z c
  C = center_of c

  = radius_dist X c
  = radius_dist Y c
  = radius_dist Z c
  = isosceles_ss C Y X
  = isosceles_ss C Y Z

  ins_angle = angle X Y Z
  cent_angle = angle X C Z
  = 2 ins_angle == cent_angle

concyclic_to_angles: X:P Y:P A:P B:P c:C
  <- lies_on X c
  <- lies_on Y c
  <- lies_on A c
  <- lies_on B c

  alpha cent = inscribed_angle X A Y c
  beta cent' = inscribed_angle X B Y c
  = cent == cent'
  = angle_div2 alpha beta

  = alpha == beta

angles_to_concyclic: X:P Y:P A:P c:C B:P
  <- lies_on X c
  <- lies_on Y c
  <- lies_on A c
  <- eq_angle X A Y X B Y

  alpha = angle X A Y
  beta = angle X B Y
  y = line Y B
  B' = intersection_remoter y c Y
  = line_uq Y B' y
  = concyclic_to_angles X Y A B' c
  x = line X B
  x' = line X B'
  = parallel_eq x x' X
  = intersection_uq x y B
  = intersection_uq x y B'

  = lies_on B c

thales_theorem: c:C A:P B:P X:P
  <- lies_on A c
  <- lies_on B c
  <- lies_on X c
  <- not_eq A X
  <- not_eq B X
  <- not_eq A B
  C <- center_of c
  d_line <- line A B
  <- lies_on C d_line
  a = line A X
  b = line B X

  = line_uq A C d_line
  = line_uq B C d_line
  ins_angle _ = inscribed_angle A X B c
  a90 = 90^
  = angle_div2 ins_angle a90
  
  = perpendicular a b

midsegment: A:P B:P C:P -> C':P B':P
  C' = midpoint A B
  B' = midpoint C A
  = eq_angle B A C C' A B'
  = sim_sas B A C C' A B'
  = parallel B C B' C'
  r = dist_ratio B' C' B C
  = r == 1 / 2

thales_rev: A:P B:P X:P
  <- perpendicular A X X B
  M = midpoint A B

  Mb _ = midsegment A X B
  l = line Mb M
  l' = perp_bisector A X
  = parallel_eq l l' Mb
  = point_on_perp_bisector M A X
  
  = eq_dist M A M X

perpline: l:L A:P -> p:L
  dir = direction_of l
  dir_p = dir + 90^
  p = line_with_direction A dir_p
perpline_uq: l:L A:P p:L
  <- perpendicular l p
  <- lies_on A p
  dir = direction_of p
  = line_uq A dir p
  p' = perpline l A
  = p == p'

paraline: l:L A:P -> pa:L
  dir = direction_of l
  pa = line_with_direction A dir
paraline: X0:P X1:P A:P -> pa:L
  l = line X0 X1
  pa = paraline l A

foot: A:P l:L -> F:P
  <- not_on A l
  p = perpline l A
  F = intersection p l
  = line_uq A F p
foot: A:P X0:P X1:P -> F:P
  l = line X0 X1
  F = foot A l
foot_uq: A:P l:L F:P
  <- lies_on F l
  <- perpendicular A F l
  p = line A F
  = perpline_uq l A p
  = intersection_uq p l F
  F' = foot A l
  = F == F'

is_tangent: c:C l:L; l:L c:C
  C <- center_of c
  X <- foot C l
  <- lies_on X c
touchpoint: c:C l:L -> X:P ; l:L c:C -> X:P
  <- is_tangent c l
  C = center_of c
  X = foot C l
tangent_at: A:P c:C -> t:L
  <- lies_on A c
  C = center_of c
  l = line A C
  t = perpline l A
  = foot_uq C t A
  = is_tangent c t

tangent0: A:P c:C -> l:L X:P
  C = center_of c
  d = diacircle A C
  X = intersection0 c d
  l = line A X

  = thales_theorem d A C X
  = foot_uq C l X
  = is_tangent l c

tangent1: A:P c:C -> l:L X:P
  C = center_of c
  d = diacircle A C
  X = intersection1 c d
  l = line A X

  = thales_theorem d A C X
  = foot_uq C l X
  = is_tangent l c

tangents: A:P c:C -> t1:L X1:P t2:L X2:P
  t1 X1 = tangent0 A c
  t2 X2 = tangent1 A c

tangent_closer: A:P c:C P:P -> l:L X:P
  C = center_of c
  d = diacircle A C
  X = intersection_closer c d P
  l = line A X

  = thales_theorem d A C X
  = foot_uq C l X
  = is_tangent l c

tangent_remoter: A:P c:C P:P -> l:L X:P
  C = center_of c
  d = diacircle A C
  X = intersection_remoter c d P
  l = line A X

  = thales_theorem d A C X
  = foot_uq C l X
  = is_tangent l c

angle_bisector_int: A:P B:P C:P -> l:L
  l1 = line B A
  l2 = line B C
  c = circle B A
  C' = intersection_closer l2 c C
  = line_uq B C' l2
  = radius_dist C' c
  l = perp_bisector A C'
  = point_lies_on_perp_bisector A C' B

  = lies_on B l
  = eq_angle l1 l l l2

angle_bisector_ext: A:P B:P C:P -> l:L
  l1 = line B A
  l2 = line B C
  c = circle B A
  C' = intersection_remoter l2 c C
  = line_uq B C' l2
  = radius_dist C' c
  l = perp_bisector A C'
  = point_lies_on_perp_bisector A C' B

  = lies_on B l
  = eq_angle l1 l l l2

dist : A:P l:L -> d:D
  <- not_on A l
  F = foot A l
  d = dist A F
dist : l:L A:P -> d:D
  d = dist A l

point_on_angle_bisector: X:P l:L A:P l1:L l2:L
  <- lies_on A l
  <- lies_on A l1
  <- lies_on A l2
  <- eq_angle l1 l l l2
  <- lies_on X l
  <- not_eq A X

  = line_uq A X l
  F1 = foot X l1
  F2 = foot X l2
  = line_uq A F1 l1
  = line_uq A F2 l2

  = cong_asa_r A F1 X A F2 X

  d1 = dist X l1
  d2 = dist X l2
  = d1 == d2

point_lies_on_angle_bisector: X:P l:L A:P l1:L l2:L
  <- lies_on A l
  <- lies_on A l1
  <- lies_on A l2
  <- eq_angle l1 l l l2
  <- not_eq A X
  d1 <- dist X l1
  d2 <- dist X l2
  <- d1 == d2

  F1 = foot X l1
  F2 = foot X l2
  = line_uq A F1 l1
  = line_uq A F2 l2
  = cong_Ssa_r F1 A X F2 A X
  l' = line A X
  dir = direction_of l
  dir' = direction_of l'
  = angle_div2 dir dir'
  = parallel_eq l l' A

  = lies_on X l

point_on_angle_bisector: X:P l:L A:P B:P C:P
  l1 <- line B A
  l2 <- line B C
  <- not_eq X A
  <- lies_on B l
  <- lies_on X l
  <- eq_angle l1 l l l2
  = point_on_angle_bisector X l B l1 l2

point_lies_on_angle_bisector: X:P l:L A:P B:P C:P
  l1 <- line B A
  l2 <- line B C
  <- not_eq X A
  <- lies_on B l
  <- eq_angle l1 l l l2
  d1 <- dist X l1
  d2 <- dist X l2
  <- d1 == d2

  = point_lies_on_angle_bisector X l B l1 l2
  = lies_on X l

incenter: A:P B:P C:P -> I:P
  a = angle_bisector_int C A B
  b = angle_bisector_int A B C
  c = angle_bisector_int B C A
  I = intersection a b
  = point_on_angle_bisector I a C A B
  = point_on_angle_bisector I b A B C
  = point_lies_on_angle_bisector I c B C A

  alpha2 = angle C A I
  beta2  = angle A B I
  gamma2 = angle B C I
  sum = alpha2 + beta2 + gamma2
  a90 = 90^
  = angle_div2 sum a90
  
  = alpha2 + beta2 + gamma2 == 90^
  = lies_on I a
  = lies_on I b
  = lies_on I c

incircle: A:P B:P C:P -> i:C
  I = incenter A B C
  a b c = trisides A B C
  F = foot I a
  i = circle I F

  Fb = foot I b
  Fc = foot I c
  = on_circle_by_dist Fb i
  = on_circle_by_dist Fc i
  
  = is_tangent a i
  = is_tangent b i
  = is_tangent b i

excenter: A:P B:P C:P -> E:P
  a = angle_bisector_int C A B
  b = angle_bisector_ext A B C
  c = angle_bisector_ext B C A
  E = intersection a b
  = point_on_angle_bisector E a C A B
  = point_on_angle_bisector E b A B C
  = point_lies_on_angle_bisector E c B C A

  alpha2 = angle C A E
  beta2  = angle A B E
  gamma2 = angle B C E
  sum = alpha2 + beta2 + gamma2
  a90 = 90^
  = angle_div2 sum a90
  
  = alpha2 + beta2 + gamma2 == 90^
  = lies_on E a
  = lies_on E b
  = lies_on E c

excircle: A:P B:P C:P -> e:C
  E = excenter A B C
  a b c = trisides A B C
  F = foot E a
  e = circle E F

  Fb = foot E b
  Fc = foot E c
  = on_circle_by_dist Fb e
  = on_circle_by_dist Fc e

  = is_tangent a e
  = is_tangent b e
  = is_tangent c e

median: A:P B:P C:P -> m:L
  M = midpoint B C
  m = line A M

centroid: A:P B:P C:P -> G:P
  a = median A B C
  b = median B C A
  c = median C A B
  Ma = midpoint B C
  Mb = midpoint C A
  Mc = midpoint A B
  G = intersection b c
  = line_uq B G b
  = line_uq Mb G b
  = line_uq C G c
  = line_uq Mc G c
  _ _ = midsegment A B C
  = sim_aa B C G Mb Mc G
  _ _ = midsegment B C A
  = sim_sas G C A G Mc Ma
  a0 = line A G
  a1 = line G Ma
  = parallel_eq a0 a1 G
  = line_uq A Ma a0

  = lies_on G a
  = lies_on G b
  = lies_on G c

altitude: A:P B:P C:P -> p:L
  a = line B C
  p = perpline a A

orthocenter: A:P B:P C:P -> H:P
  a = altitude A B C
  b = altitude B C A
  c = altitude C A B
  H = intersection a b

  aa = paraline B C A
  bb = paraline C A B
  cc = paraline A B C
  AA = intersection bb cc
  BB = intersection cc aa
  CC = intersection aa bb
  = line_uq A BB aa
  = line_uq A CC aa
  = line_uq B CC bb
  = line_uq B AA bb
  = line_uq C AA cc
  = line_uq C BB cc
  = line_uq BB CC aa
  = line_uq CC AA bb
  = line_uq AA BB cc
  = cong_asa A B C C BB A
  = cong_asa B C A A CC B
  = cong_asa C A B B AA C
  = midpoint_uq BB CC A
  = midpoint_uq CC AA B
  = midpoint_uq AA BB C
  H' = circumcenter AA BB CC
  a' = perp_bisector BB CC
  b' = perp_bisector CC AA
  c' = perp_bisector AA BB
  = parallel_eq a a' A
  = parallel_eq b b' B
  = parallel_eq c c' C
  = H' == H

  = lies_on H a
  = lies_on H b
  = lies_on H c

circle9: A:P B:P C:P -> f:C
  Ma = midpoint B C
  Mb = midpoint C A
  Mc = midpoint A B
  f = circumcircle Ma Mb Mc
  Fa = foot A B C
  Fb = foot B C A
  Fc = foot C A B
  H = orthocenter A B C
  Ha = midpoint H A
  Hb = midpoint H B
  Hc = midpoint H C

  # Proof that Ha Hb Hc lies on f

  alt_a = altitude A B C
  = line_uq A H alt_a
  _ _ = midsegment A B C
  _ _ = midsegment H B C
  _ _ = midsegment B H A
  _ _ = midsegment C H A
  _ = rectangle_axis Mb Mc Hb Hc
  alt_b = altitude B C A
  = line_uq B H alt_b
  _ _ = midsegment B C A
  _ _ = midsegment H C A
  _ _ = midsegment C H B
  _ _ = midsegment A H B
  _ = rectangle_axis Mc Ma Hc Ha
  fH = circumcircle Ha Hb Hc
  _ _ = midsegment C A B
  _ _ = midsegment H A B
  = cong_circumradius Ma Mb Mc Ha Hb Hc
  = fH == f

  # Proof that Fa Fb Fc lies on f

  a b c = trisides A B C
  = line_uq B Fa a
  = line_uq C Fa a
  = thales_rev A B Fa
  = thales_rev C A Fa
  = cong_sss_r Mb Mc Fa Mc Mb Ma
  = angles_to_concyclic Mb Mc Ma f Fa
  = line_uq C Fb b
  = line_uq A Fb b
  = thales_rev B C Fb
  = thales_rev A B Fb
  = cong_sss_r Mc Ma Fb Ma Mc Mb
  = angles_to_concyclic Mc Ma Mb f Fb
  = line_uq A Fc c
  = line_uq B Fc c
  = thales_rev C A Fc
  = thales_rev B C Fc
  = cong_sss_r Ma Mb Fc Mb Ma Mc
  = angles_to_concyclic Ma Mb Mc f Fc

  = lies_on Ma f
  = lies_on Mb f
  = lies_on Mc f
  = lies_on Fa f
  = lies_on Fb f
  = lies_on Fc f
  = lies_on Ha f
  = lies_on Hb f
  = lies_on Hc f

reflect: A:P l:L -> B:P
  p = perpline l A
  M = intersection p l
  c = circle M A
  B = intersection_remoter c p A
  l' = perp_bisector A B
  = line_uq A B p
  = radius_dist B c
  = point_lies_on_perp_bisector A B M
  = parallel_eq l' l M

reflect: A:P M:P -> B:P
  l = line A M
  c = circle M A
  B = intersection_remoter c l A
  M' = midpoint A B
  = line_uq A B l
  = radius_dist B c
  = midpoint_uq A B M
  = M == M'

isogonal_by_refl: X:P A:P B:P C:P -> l:L
  _ b c = trisides A B C
  Xb = reflect X b
  Xc = reflect X c
  l = perp_bisector Xb Xc
  x = line X A

  = point_on_perp_bisector A X Xb
  = point_on_perp_bisector A X Xc
  = isosceles_ss A Xb Xc
  = point_lies_on_perp_bisector Xb Xc A
  ang = angle b x
  ang' = angle l c
  = angle_div2 ang ang'
  = eq_angle b x l c

conjugate: X:P A:P B:P C:P -> Y:P
  a b c = trisides A B C
  Xa = reflect X a
  Xb = reflect X b
  Xc = reflect X c
  Y = circumcenter Xa Xb Xc

  ia = isogonal_by_refl X A B C
  ib = isogonal_by_refl X B C A
  ic = isogonal_by_refl X C A B
  = line_uq A Y ia
  = line_uq B Y ib
  = line_uq C Y ic
  = eq_angle X A B C A Y
  = eq_angle X B C A B Y
  = eq_angle X C A B C Y

midpoint_op_arc: A:P B:P C:P -> M:P
  l = angle_bisector_int A B C
  c = circumcircle A B C
  M = intersection_remoter l c B
  = line_uq B M l
  = concyclic_to_angles M C A B c
  = concyclic_to_angles A M B C c
  = isosceles_aa M A C

  = eq_dist M A M C

midpoint_arc: A:P B:P C:P -> M2:P
  O = circumcenter A B C
  M1 = midpoint_op_arc A B C
  M2 = reflect M1 O

  c = circumcircle A B C
  = radius_dist M1 c
  = lies_on M2 c

  b = perp_bisector C A
  = point_lies_on_perp_bisector C A M1
  = line_uq M1 O b
  = point_on_perp_bisector M2 C A
  = eq_dist A M2 M2 C

inverse: A:P c:C -> R:P
  C = center_of c
  a = line A C
  B = point_on c
  X = intersection0 c a
  b = line B X
  A' = reflect A b
  r = line B A'
  R = intersection a r

  d = dist A C
  d' = dist R C
  r = radius_of c

  = radius_dist X c
  = radius_dist B c
  = isosceles_ss C X B
  = point_on_perp_bisector B A A'
  = line_uq R C a
  = sim_aa_r A B C B R C

  = d * d' == r^2
